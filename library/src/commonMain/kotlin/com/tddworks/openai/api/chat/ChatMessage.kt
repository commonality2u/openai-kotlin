package com.tddworks.openai.api.chat

import com.tddworks.openai.api.chat.capabilities.vision.VisionMessageContent
import kotlinx.serialization.*
import kotlin.jvm.JvmInline


/**
 * Data class representing a user message.
 *
 * @property content The content of the message.
 * @property role The role of the message sender (user or assistant). Default is USER.
 */
@OptIn(ExperimentalSerializationApi::class)
@Serializable
sealed interface ChatMessage<T> where T : MessageContent<*> {
    val content: T
    val role: Role

    companion object {
        fun system(content: String) = SystemMessage(MessageContent.TextMessageContent(content))
        fun user(content: String) = UserMessage(MessageContent.TextMessageContent(content))
        fun assistant(content: String, toolCalls: List<ToolCall>? = null) =
            AssistantMessage(MessageContent.TextMessageContent(content), toolCalls = toolCalls)

        fun tool(content: String, toolCallId: String) =
            ToolMessage(content = MessageContent.TextMessageContent(content), toolCallId = toolCallId)

        fun vision(content: List<VisionMessageContent>) = VisionMessage(MessageContent.VisionContent(content))
    }

    @Serializable
    data class SystemMessage(
        @SerialName("content")
        override val content: MessageContent.TextMessageContent,
        @SerialName("role")
        @EncodeDefault(EncodeDefault.Mode.ALWAYS)
        override val role: Role = Role.SYSTEM,
    ) : ChatMessage<MessageContent.TextMessageContent>

    @Serializable
    data class UserMessage(
        @SerialName("content")
        override val content: MessageContent.TextMessageContent,
        @EncodeDefault(EncodeDefault.Mode.ALWAYS)
        @SerialName("role")
        override val role: Role = Role.USER,
    ) : ChatMessage<MessageContent.TextMessageContent>

    @Serializable
    data class AssistantMessage(
        @SerialName("content")
        override val content: MessageContent.TextMessageContent,
        @SerialName("role")
        @EncodeDefault(EncodeDefault.Mode.ALWAYS)
        override val role: Role = Role.ASSISTANT,
        @SerialName("tool_calls")
        val toolCalls: List<ToolCall>? = null,
    ) : ChatMessage<MessageContent.TextMessageContent>

    @Serializable
    data class ToolMessage(
        /**
         * The contents of the tool message.
         */
        @SerialName("content")
        override val content: MessageContent.TextMessageContent,
        /**
         * The role of the messages author, in this case tool.
         */
        @SerialName("role")
        override val role: Role = Role.TOOL,
        /**
         * Tool call that this message is responding to.
         */
        @SerialName("tool_call_id")
        val toolCallId: String,
    ) : ChatMessage<MessageContent.TextMessageContent>

    /**
     * @see [Learn how to use GPT-4 to understand images](https://platform.openai.com/docs/guides/vision)
     */
    @Serializable
    data class VisionMessage(
        /**
         * The contents of the tool message.
         */
        @SerialName("content")
        override val content: MessageContent.VisionContent,
        /**
         * The role of the messages author, in this case tool.
         */
        @SerialName("role")
        override val role: Role = Role.USER,
    ) : ChatMessage<MessageContent.VisionContent>
}

@Serializable
sealed interface MessageContent<T> {
    val content: T

    @Serializable
    @JvmInline
    value class TextMessageContent(
        override val content: String,
    ) : MessageContent<String>

    @Serializable
    @JvmInline
    value class VisionContent(
        override val content: List<VisionMessageContent>,
    ) : MessageContent<List<VisionMessageContent>>
}

@Serializable
data class ToolCall(
    /**
     * id string
     * Required
     * The ID of the tool call.
     */
    @SerialName("id")
    val id: String,

    /**
     * string Required
     * The type of the tool. Currently, only function is supported.
     */
    @SerialName("type")
    val type: String,

    /**
     * object Required
     * The function that the model called.
     */
    @SerialName("function")
    val function: Function,
)

@Serializable
data class Function(
    /**
     * string Required
     * The name of the function to call.
     */
    @SerialName("name")
    val name: String,

    /**
     * object Required
     * The parameters to pass to the function.
     * The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
     */
    @SerialName("arguments")
    val arguments: String,
)